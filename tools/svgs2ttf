#!/usr/bin/fontforge -script

import sys
import os.path
import json

IMPORT_OPTIONS = ('removeoverlap', 'correctdir')

try:
    unicode
except NameError:
    unicode = str

def loadConfig(filename='font.json'):
    with open(filename) as f:
        return json.load(f)

def setProperties(font, config):
    props = config['props']
    lang = props.pop('lang', 'English (US)')
    family = props.pop('family', None)
    style = props.pop('style', 'Regular')
    props['encoding'] = props.get('encoding', 'UnicodeFull')
    if family is not None:
        font.familyname = family
        font.fontname = family + '-' + style
        font.fullname = family + ' ' + style
    for k, v in config['props'].items():
        if hasattr(font, k):
            if isinstance(v, list):
                v = tuple(v)
            setattr(font, k, v)
        else:
            font.appendSFNTName(lang, k, v)
    for t in config.get('sfnt_names', []):
        font.appendSFNTName(str(t[0]), str(t[1]), unicode(t[2]))

def addGlyphs(font, config):
    glyphs = config['glyphs']
    src_dir = glyphs.pop('src')
    try:
        glyphs_map = loadConfig(glyphs.pop('glyphmap'))
    except IOError:
        raise
    for svg in os.listdir(src_dir):
        if not svg.endswith('.svg'):
            print("Warn: skip import %s" % svg)
            continue
        # Convert unicode filename to decimal.
        codepoint = glyphs_map.get(svg[:-4], None)
        if not codepoint:
            print("Warn: %s has no codepoint" % svg)
            continue
        try:
            g = font.createMappedChar(codepoint)
        except Exception as e:
            print("- %s Create error: %s" % (svg, e))
            continue
        g.importOutlines(os.path.join(src_dir, svg), IMPORT_OPTIONS)
        g.removeOverlap()
        for key, value in glyphs.items():
            if hasattr(g, key):
                if isinstance(value, list):
                    value = tuple(value)
                setattr(g, key, value)

def main(config_file):
    config = loadConfig(config_file)
    os.chdir(os.path.dirname(config_file) or '.')
    font = fontforge.font()
    setProperties(font, config)
    addGlyphs(font, config)
    for outfile in config['output']:
        sys.stderr.write('Generating %s...\n' % outfile)
        font.generate(outfile)

if __name__ == '__main__':
    if len(sys.argv) > 1:
        main(sys.argv[1])
    else:
        sys.stderr.write("\nUsage: %s something.json\n" % sys.argv[0] )

# vim: set filetype=python:
